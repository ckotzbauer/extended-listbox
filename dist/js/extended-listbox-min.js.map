{"version":3,"sources":["webpack://extendedlistbox/webpack/bootstrap","webpack://extendedlistbox/./src/ts/BaseListBox.ts","webpack://extendedlistbox/./src/ts/Index.ts","webpack://extendedlistbox/./src/ts/SingleSelectListBox.ts","webpack://extendedlistbox/./src/ts/MultiSelectListBox.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseListBox","domelement","options","multiple","dataItems","selectedDataItems","searchBar","searchBarWatermark","searchBarButton","visible","this","_target","_settings","classList","add","MAIN_CLASS","_createSearchbar","_createList","searchbarWrapper","document","createElement","SEARCHBAR_CLASS","appendChild","searchbar","setAttribute","onkeyup","searchQuery","toLowerCase","items","_list","querySelectorAll","LIST_ITEM_CLASS","length","thisItem","item","contains","LIST_ITEM_CLASS_GROUP","innerText","indexOf","style","display","parentElement","groups","childs","index","j","_filterChanged","button","id","SEARCHBAR_BUTTON_CLASS","onClick","onclick","icon","split","forEach","_searchbarWrapper","_searchbar","LIST_CLASS","_resizeListToListBox","getItems","addItem","_prepareDataItem","parseInt","Math","random","dataItem","childItems","disabled","groupHeader","_generateItemId","parentGroupId","selected","text","push","internal","parent","tabIndex","title","onkeydown","e","target","eventPhase","which","_fireEvent","EVENT_ITEM_ENTER_PRESSED","_getDataItem","preventDefault","_itemArrowUp","_itemArrowDown","_itemClicked","ctrlKey","ondblclick","EVENT_ITEM_DOUBLE_CLICKED","LIST_ITEM_CLASS_DISABLED","possibleParent","_locateItem","LIST_ITEM_CLASS_CHILD","undefined","children","insertBefore","_addItem","computed","window","getComputedStyle","containerPadding","getPropertyValue","listHeight","offsetHeight","height","domItem","remove","LIST_ITEM_CLASS_SELECTED","currentItem","removeIndex","splice","querySelector","titleItems","current","direction","potentialNext","sibling","nextChildren","firstElementChild","lastElementChild","args","delegate","toUpperCase","substr","eventName","element","Array","slice","prev","_findNextItem","_clearItemSelection","next","clearSelection","EVENT_ITEMS_CHANGED","map","uiItem","removeChild","selectedIndex","removeItem","firstChild","allItems","data","newIndex","previousElementSibling","_elementIndex","nextElementSibling","parentNode","enable","MAIN_DISABLED_CLASS","EVENT_VALUE_CHANGED","EVENT_FILTER_CHANGED","SingleSelectListBox","domElement","super","_selectedDomItem","_createListbox","ctrl","toggle","focus","elements","MultiSelectListBox"],"mappings":"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","file":"extended-listbox-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {ListBoxSettings} from \"./contract/ListBoxSettings\";\nimport {ListBoxEvent} from \"./event/ListBoxEvent\";\nimport {ListBoxItem} from \"./contract/ListBoxItem\";\n\nexport abstract class BaseListBox {\n\n    public static MAIN_CLASS: string = 'listbox-root';\n    public static MAIN_DISABLED_CLASS: string = 'listbox-disabled';\n    public static LIST_CLASS: string = 'listbox';\n    public static LIST_ITEM_CLASS: string = 'listbox-item';\n    public static LIST_ITEM_CLASS_DISABLED: string = 'listbox-item-disabled';\n    public static LIST_ITEM_CLASS_SELECTED: string = 'listbox-item-selected';\n    public static LIST_ITEM_CLASS_GROUP: string = 'listbox-item-group';\n    public static LIST_ITEM_CLASS_CHILD: string = 'listbox-item-child';\n    public static SEARCHBAR_CLASS: string = 'listbox-searchbar';\n    public static SEARCHBAR_BUTTON_CLASS: string = 'listbox-searchbar-button';\n\n    public static EVENT_VALUE_CHANGED: string = \"valueChanged\";\n    public static EVENT_FILTER_CHANGED: string = \"filterChanged\";\n    public static EVENT_ITEMS_CHANGED: string = \"itemsChanged\";\n    public static EVENT_ITEM_ENTER_PRESSED: string = \"itemEnterPressed\";\n    public static EVENT_ITEM_DOUBLE_CLICKED: string = \"itemDoubleClicked\";\n\n    public _target: HTMLElement;\n    public _list: HTMLDivElement;\n    private _searchbarWrapper: HTMLDivElement;\n    public _searchbar: HTMLInputElement;\n\n    public _settings: ListBoxSettings;\n    private multiple: boolean;\n\n    private dataItems: ListBoxItem[] = [];\n    public selectedDataItems: ListBoxItem[] = [];\n\n    protected constructor(domelement: HTMLElement, options: ListBoxSettings, multiple: boolean) {\n        options = options || {};\n        options.searchBar = options.searchBar || false;\n        options.searchBarWatermark = options.searchBarWatermark || \"Search...\";\n        options.searchBarButton = options.searchBarButton || { visible: false };\n\n        this._target = domelement;\n        this._settings = options;\n        this.multiple = multiple;\n    }\n\n    protected abstract _itemClicked(domItem: HTMLElement, ctrl?: boolean): void;\n    protected abstract _filterChanged(): void;\n\n    protected _createListbox(): void {\n        this._target.classList.add(BaseListBox.MAIN_CLASS);\n\n        if (this._settings.searchBar) {\n            this._createSearchbar();\n        }\n\n        this._createList();\n    }\n\n    private _createSearchbar(): void {\n        // searchbar wrapper is needed for properly stretch\n        // the searchbar over the listbox width\n        const searchbarWrapper: HTMLDivElement = document.createElement(\"div\");\n        searchbarWrapper.classList.add(BaseListBox.SEARCHBAR_CLASS + '-wrapper');\n        this._target.appendChild(searchbarWrapper);\n\n        const searchbar: HTMLInputElement = document.createElement(\"input\");\n        searchbar.classList.add(BaseListBox.SEARCHBAR_CLASS);\n        searchbar.setAttribute(\"placeholder\", this._settings.searchBarWatermark);\n        searchbarWrapper.appendChild(searchbar);\n\n        // set filter handler\n        searchbar.onkeyup = (): void => {\n            const searchQuery: string = searchbar.value.toLowerCase();\n\n            if (searchQuery !== '') {\n                // hide list items which are not matched search query\n                const items: NodeListOf<HTMLDivElement> = this._list.querySelectorAll<any>(\".\" + BaseListBox.LIST_ITEM_CLASS);\n                for (let i: number = 0; i < items.length; i++) {\n                    const thisItem: HTMLDivElement = items.item(i);\n\n                    if (thisItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP)) {\n                        continue;\n                    }\n\n                    const text: string = thisItem.innerText.toLowerCase();\n\n                    if (text.indexOf(searchQuery) !== -1) {\n                        thisItem.style.display = \"block\";\n                        thisItem.parentElement.style.display = \"block\";\n                    } else {\n                        thisItem.style.display = \"none\";\n                    }\n                }\n\n                // hide group item only, if all childs are hidden\n                const groups: NodeListOf<Element> =\n                    this._list.querySelectorAll(\".\" + BaseListBox.LIST_ITEM_CLASS_GROUP);\n                for (let i: number = 0; i < groups.length; i++) {\n                    const thisItem: HTMLElement = groups.item(i) as HTMLElement;\n                    const childs: NodeListOf<Element> = thisItem.querySelectorAll(\".\" + BaseListBox.LIST_ITEM_CLASS);\n                    let index: number = -1;\n\n                    for (let j: number = 0; j < childs.length; j++) {\n                        if ((childs.item(j) as HTMLElement).style.display !== \"none\") {\n                            index = j;\n                            break;\n                        }\n                    }\n\n                    if (index === -1) {\n                        thisItem.style.display = \"none\";\n                    } else {\n                        thisItem.style.display = \"block\";\n                    }\n                }\n            } else {\n                // make visible all list items\n                const items: NodeListOf<Element> = this._list.querySelectorAll(\".\" + BaseListBox.LIST_ITEM_CLASS);\n                for (let i: number = 0; i < items.length; i++) {\n                    const thisItem: HTMLElement = items.item(i) as HTMLElement;\n                    thisItem.style.display = \"block\";\n                }\n            }\n\n            this._filterChanged();\n        };\n\n        if (this._settings.searchBarButton.visible) {\n            // create button in search field\n            const button: HTMLButtonElement = document.createElement(\"button\");\n            button.id = \"searchBarButton\";\n            button.setAttribute(\"tabindex\", \"-1\");\n            button.classList.add(BaseListBox.SEARCHBAR_BUTTON_CLASS);\n            searchbarWrapper.appendChild(button);\n\n            if (this._settings.searchBarButton.onClick) {\n                button.onclick = this._settings.searchBarButton.onClick;\n            }\n\n            // icon for search button\n            if (this._settings.searchBarButton.icon) {\n                const icon: HTMLElement = document.createElement(\"i\");\n                const parts: string[] = this._settings.searchBarButton.icon.split(\" \");\n                parts.forEach((p: string) => icon.classList.add(p));\n                button.appendChild(icon);\n            }\n        }\n\n        // save for using in _resizeListToListBox()\n        this._searchbarWrapper = searchbarWrapper;\n        this._searchbar = searchbar;\n    }\n\n    private _createList(): void {\n        // create container\n        this._list = document.createElement(\"div\");\n        this._list.classList.add(BaseListBox.LIST_CLASS);\n        this._target.appendChild(this._list);\n\n        this._resizeListToListBox();\n\n        // create items\n        if (this._settings.getItems) {\n            const items: (string|ListBoxItem)[] = <(string|ListBoxItem)[]>this._settings.getItems();\n            if (items) {\n                for (let index in items) {\n                    this.addItem(this._prepareDataItem(items[index]), true);\n                }\n            }\n        }\n    }\n\n    private _generateItemId(): string {\n        const num: number = parseInt(\"\" + (Math.random() * 10000000), 10);\n        return \"listBoxItem\" + num;\n    }\n\n    private _prepareDataItem(dataItem: ListBoxItem|string): ListBoxItem {\n        /* tslint:disable:no-string-literal */\n        let item: ListBoxItem = {\n            childItems: [],\n            disabled: false,\n            groupHeader: null,\n            id: this._generateItemId(),\n            parentGroupId: null,\n            selected: false,\n            text: null,\n            index: null\n        };\n        /* tslint:enable:no-string-literal */\n\n        if (typeof dataItem === \"string\" || typeof dataItem === \"number\") {\n            item.text = <string> dataItem;\n            return item;\n        } else {\n            for (let i in dataItem) {\n                if (dataItem.hasOwnProperty(i)) {\n                    item[i] = dataItem[i];\n                }\n            }\n\n            const childs: ListBoxItem[] = [];\n\n            for (let index in item.childItems) {\n                childs.push(this._prepareDataItem(item.childItems[index]));\n            }\n\n            item.childItems = childs;\n            return item;\n        }\n    }\n\n    private _addItem(dataItem: ListBoxItem, internal: boolean, parent: HTMLElement): string {\n        this.dataItems.push(dataItem);\n\n        const item: HTMLDivElement = document.createElement(\"div\");\n        item.classList.add(BaseListBox.LIST_ITEM_CLASS);\n        item.innerText = dataItem.text;\n        item.id = dataItem.id;\n        item.tabIndex = 1;\n        item.title = dataItem.text;\n        item.onkeydown = (e: KeyboardEvent): void => {\n            if (!(<HTMLElement>e.target).classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP) && e.eventPhase === 2) {\n                if (e.which === 13) {\n                    // Enter\n                    this._fireEvent(BaseListBox.EVENT_ITEM_ENTER_PRESSED, this._getDataItem((e.target as HTMLElement).id));\n                } else if (e.which === 38) {\n                    // Arrow up\n                    e.preventDefault();\n                    this._itemArrowUp(e.target as HTMLElement);\n                } else if (e.which === 40) {\n                    // Arrow down\n                    e.preventDefault();\n                    this._itemArrowDown(e.target as HTMLElement);\n                }\n            }\n        };\n\n        item.onclick = (e: MouseEvent): void => {\n            if (e.eventPhase === 2) {\n                this._itemClicked(e.target as HTMLElement, e.ctrlKey);\n            }\n        };\n\n        item.ondblclick = (e: MouseEvent): void => {\n            if (!(<HTMLElement>e.target).classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP)) {\n                this._fireEvent(BaseListBox.EVENT_ITEM_DOUBLE_CLICKED, this._getDataItem((e.target as HTMLElement).id));\n            }\n        };\n\n        if (dataItem.disabled) {\n            item.classList.add(BaseListBox.LIST_ITEM_CLASS_DISABLED);\n        }\n\n        if (dataItem.groupHeader) {\n            item.classList.add(BaseListBox.LIST_ITEM_CLASS_GROUP);\n        }\n\n        if (dataItem.selected) {\n            this._itemClicked(item, true);\n        }\n\n        if (dataItem.parentGroupId) {\n            const possibleParent: HTMLElement = this._locateItem(dataItem.parentGroupId);\n\n            if (possibleParent) {\n                parent = possibleParent;\n            }\n        }\n\n        if (parent) {\n            item.classList.add(BaseListBox.LIST_ITEM_CLASS_CHILD);\n        }\n\n        let target: HTMLElement = parent ? parent : this._list;\n        if (dataItem.index !== undefined && dataItem.index !== null && !internal) {\n            target = <HTMLElement>target.children.item(dataItem.index);\n            target.parentElement.insertBefore(item, target);\n        } else {\n            target.appendChild(item);\n        }\n\n        if (dataItem.childItems && dataItem.childItems.length > 0) {\n            if (!item.classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP)) {\n                item.classList.add(BaseListBox.LIST_ITEM_CLASS_GROUP);\n            }\n\n            for (let index: number = 0; index < dataItem.childItems.length; index++) {\n                this._addItem(this._prepareDataItem(dataItem.childItems[index]), internal, item);\n            }\n        }\n\n\n        return dataItem.id;\n    }\n\n    protected _resizeListToListBox(): void {\n        const computed: CSSStyleDeclaration = window.getComputedStyle(this._target, null);\n        const containerPadding: number = parseInt(computed.getPropertyValue(\"padding-top\"), 10) +\n            parseInt(computed.getPropertyValue(\"padding-bottom\"), 10);\n        let listHeight: number = parseInt(computed.getPropertyValue(\"height\"), 10) - containerPadding;\n\n        if (this._settings.searchBar) {\n            listHeight -= this._searchbarWrapper.offsetHeight;\n        }\n\n        this._list.style.height = listHeight + \"px\";\n    }\n\n    protected _clearItemSelection(domItem: HTMLElement): void {\n        domItem.classList.remove(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n        this._getDataItem(domItem.id).selected = false;\n\n        if (this.multiple) {\n            const currentItem: ListBoxItem = this._getDataItem(domItem.id);\n            const removeIndex: number = this.selectedDataItems.indexOf(currentItem);\n            this.selectedDataItems.splice(removeIndex, 1);\n        } else {\n            this.selectedDataItems.splice(0, this.selectedDataItems.length);\n        }\n    }\n\n    protected _locateItem(name: string): HTMLElement {\n        let id: string = null;\n        for (let i: number = 0; i < this.dataItems.length; i++) {\n            if (this.dataItems[i].id === name || this.dataItems[i].text === name) {\n                id = this.dataItems[i].id;\n                break;\n            }\n        }\n\n        let item: HTMLElement = this._target.querySelector(\"#\" + id) as HTMLElement;\n        if (!item) {\n            const titleItems: NodeListOf<Element> = this._target.querySelectorAll('div[title=\"' + id + '\"]');\n\n            if (titleItems.length > 0) {\n                return titleItems[0] as HTMLElement;\n            }\n        }\n\n        return item;\n    }\n\n    private _findNextItem(current: HTMLElement, direction: string): HTMLElement {\n        let potentialNext: Element = current;\n\n        do {\n            potentialNext = potentialNext[direction + \"ElementSibling\"];\n\n            if (!potentialNext) {\n                const parent: HTMLElement = current.parentElement;\n                if (parent) {\n                    const sibling: Element = parent[direction + \"ElementSibling\"];\n                    if (!sibling) {\n                        return null;\n                    }\n\n                    const nextChildren: HTMLCollection = sibling.children;\n                    if (nextChildren.length > 0) {\n                        potentialNext = direction === \"next\"\n                            ? nextChildren[0].firstElementChild\n                            : nextChildren[0].lastElementChild;\n                    } else {\n                        potentialNext = parent;\n                    }\n                } else {\n                    return null;\n                }\n            }\n\n            if (potentialNext && potentialNext.classList.contains(BaseListBox.LIST_ITEM_CLASS_DISABLED)) {\n                continue;\n            }\n\n            return potentialNext as HTMLElement;\n        } while (true);\n    }\n\n    public _fireEvent(name: string, args: any): void {\n        let delegate: (e: ListBoxEvent) => void = this._settings[\"on\" + name[0].toUpperCase() + name.substr(1)];\n\n        if (delegate) {\n            delegate({ eventName: name, target: this._target, args: args });\n        }\n    }\n\n    private _elementIndex(element: Element): number {\n        const childs: Element[] = Array.prototype.slice.call(element.parentElement.children);\n        return childs.indexOf(element);\n    }\n\n    protected _getDataItem(id: string): ListBoxItem {\n        for (let i: number = 0; i < this.dataItems.length; i++) {\n            if (this.dataItems[i].id === id) {\n                return this.dataItems[i];\n            }\n        }\n\n        return null;\n    }\n\n    private _itemArrowUp(domItem: HTMLElement): void {\n        const prev: HTMLElement = this._findNextItem(domItem, \"previous\");\n\n        if (prev) {\n            this._clearItemSelection(domItem);\n            this._itemClicked(prev);\n        }\n    }\n\n    private _itemArrowDown(domItem: HTMLElement): void {\n        const next: HTMLElement = this._findNextItem(domItem, \"next\");\n\n        if (next) {\n            this._clearItemSelection(domItem);\n            this._itemClicked(next);\n        }\n    }\n\n\n\n    /*******************************  PUBLIC API  ******************************* */\n\n    /**\n     * Add item to the listBox.\n     *\n     * @this {BaseListBox}\n     * @param {object} dataItem display data for item\n     * @param {object} internal: true if this function is not called directly as api function.\n     */\n    public addItem(dataItem: ListBoxItem|string, internal: boolean = false): string {\n        /* tslint:disable:no-string-literal */\n        if (!internal && !this.multiple && dataItem[\"selected\"]) {\n            this.clearSelection();\n        }\n        /* tslint:enable:no-string-literal */\n\n        const id: string = this._addItem(this._prepareDataItem(dataItem), internal, null);\n\n        if (!internal) {\n            this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n        }\n\n        return id;\n    }\n\n    /**\n     * Add multiple item to the listBox.\n     *\n     * @this {BaseListBox}\n     * @param {object} items display data of items\n     */\n    public addItems(items: (string|ListBoxItem)[]): string[] {\n        return items.map((item: string|ListBoxItem) => this.addItem(item));\n    }\n\n    /**\n     * Remove first matching item from the listBox.\n     *\n     * @this {BaseListBox}\n     * @param {string} item: display text or id from item to remove\n     */\n    public removeItem(item: string): void {\n        const uiItem: HTMLElement = this._locateItem(item);\n        if (uiItem) {\n            this._clearItemSelection(uiItem);\n            uiItem.parentElement.removeChild(uiItem);\n\n            const dataItem: ListBoxItem = this._getDataItem(uiItem.id);\n            this.dataItems.splice(this.dataItems.indexOf(dataItem), 1);\n\n            const selectedIndex: number = this.selectedDataItems.indexOf(dataItem);\n            if (selectedIndex !== -1) {\n                this.selectedDataItems.splice(selectedIndex, 1);\n            }\n\n            this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n        }\n    }\n\n    /**\n     * Remove all matching items of array from the listBox.\n     *\n     * @this {BaseListBox}\n     * @param {string[]} items: display text or id from items to remove\n     */\n    public removeItems(items: string[]): void {\n        items.forEach((item: string) => this.removeItem(item));\n    }\n\n\n    /**\n     * Reverts all changes on the DOM\n     *\n     * @this {BaseListBox}\n     */\n    public destroy(): void {\n        while (this._target.firstChild) {\n            this._target.removeChild(this._target.firstChild);\n        }\n\n        this._target.classList.remove(BaseListBox.MAIN_CLASS);\n    }\n\n    /**\n     * Clears all selected items.\n     */\n    public clearSelection(): void {\n        // Remove selected class from all other items\n        const allItems: NodeList = this._list.querySelectorAll(\".\" + BaseListBox.LIST_ITEM_CLASS);\n\n        for (let index: number = 0; index < allItems.length; index++) {\n            (<HTMLElement>allItems[index]).classList.remove(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n            this._getDataItem((allItems[index] as Element).id).selected = false;\n        }\n\n        this.selectedDataItems = [];\n    }\n\n\n    /**\n     * Returns the dataItem for a given id or text.\n     *\n     * @param {object} id unique id or text from listItem\n     */\n    public getItem(id: string): ListBoxItem {\n        let data: ListBoxItem = null;\n\n        const item: HTMLElement = this._locateItem(id);\n\n        if (item) {\n            data = this._getDataItem(item.id);\n        }\n\n        return data;\n    }\n\n\n    /**\n     * Returns all dataItems.\n     */\n    public getItems(): ListBoxItem[] {\n        const items: ListBoxItem[] = [];\n\n        const childs: HTMLCollection = this._list.children;\n        for (let index: number = 0; index < childs.length; index++) {\n            items.push(this._getDataItem((childs[index] as Element).id));\n        }\n\n        return items;\n    }\n\n\n    /**\n     * Decreases the index of the item by one.\n     *\n     * @param {object} id unique id or text from listItem\n     */\n    public moveItemUp(id: string): number {\n        let newIndex: number = null;\n\n        const item: HTMLElement = this._locateItem(id);\n\n        if (item && item.previousElementSibling) {\n            item.parentElement.insertBefore(item, item.previousElementSibling);\n            newIndex = this._elementIndex(item);\n            this._getDataItem(item.id).index = newIndex;\n            this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n        } else if (item) {\n            newIndex = this._elementIndex(item);\n        }\n\n        return newIndex;\n    }\n\n    /**\n     * Increases the index of the item by one.\n     *\n     * @param {object} id unique id or text from listItem\n     */\n    public moveItemDown(id: string): number {\n        let newIndex: number = null;\n\n        const item: HTMLElement = this._locateItem(id);\n\n        if (item && item.nextElementSibling) {\n            item.parentNode.insertBefore(item.nextElementSibling, item);\n            newIndex = this._elementIndex(item);\n            this._getDataItem(item.id).index = newIndex;\n            this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n        } else if (item) {\n            newIndex = this._elementIndex(item);\n        }\n\n        return newIndex;\n    }\n\n    /**\n     * Sets the index of the item to zero.\n     *\n     * @param {object} id unique id or text from listItem\n     */\n    public moveItemToTop(id: string): number {\n        let newIndex: number = null;\n\n        const item: HTMLElement = this._locateItem(id);\n\n        if (item) {\n            item.parentElement.insertBefore(item, item.parentElement.firstElementChild);\n            newIndex = this._elementIndex(item);\n            this._getDataItem(item.id).index = newIndex;\n            this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n        }\n\n        return newIndex;\n    }\n\n    /**\n     * Sets the index of the matching item to the highest.\n     *\n     * @param {object} id unique id or text from listItem\n     */\n    public moveItemToBottom(id: string): number {\n        let newIndex: number = null;\n\n        const item: HTMLElement = this._locateItem(id);\n\n        if (item) {\n            item.parentElement.appendChild(item);\n            newIndex = this._elementIndex(item);\n            this._getDataItem(item.id).index = newIndex;\n        }\n\n        this._fireEvent(BaseListBox.EVENT_ITEMS_CHANGED, this.getItems());\n\n        return newIndex;\n    }\n\n\n    /**\n     * Enables or disables the whole component.\n     *\n     * @param {boolean} enable: new enable value.\n     */\n    public enable(enable: boolean): void {\n        if (enable) {\n            this._target.classList.remove(BaseListBox.MAIN_DISABLED_CLASS);\n        } else if (!this._target.classList.contains(BaseListBox.MAIN_DISABLED_CLASS)) {\n            this._target.classList.add(BaseListBox.MAIN_DISABLED_CLASS);\n        }\n    }\n\n    /**\n     * Returns all dataItems which are selected.\n     */\n    public getSelection(): ListBoxItem[] {\n        return this.selectedDataItems;\n    }\n}\n","import {SingleSelectListBox} from \"./SingleSelectListBox\";\nimport {MultiSelectListBox} from \"./MultiSelectListBox\";\n\n(window as any).SingleSelectListBox = SingleSelectListBox;\n(window as any).MultiSelectListBox = MultiSelectListBox;\n","import {BaseListBox} from \"./BaseListBox\";\nimport {ListBoxSettings} from \"./contract/ListBoxSettings\";\nimport {ListBoxItem} from \"./contract/ListBoxItem\";\n\nexport class SingleSelectListBox extends BaseListBox {\n\n    private _selectedDomItem: HTMLElement;\n\n    /**\n     * Create an instance of SingleSelectListBox.\n     *\n     * Inherit a {ListBox} class.\n     *\n     * @constructor\n     * @this {SingleSelectListBox}\n     * @param {object} domElement DOM element to be converted to the ListBox\n     * @param {object} options an object with ListBox settings\n     */\n    constructor(domElement: HTMLElement, options?: ListBoxSettings) {\n        super(domElement, options, false);\n        this._selectedDomItem = null;\n        this._createListbox();\n    }\n\n    protected _itemClicked(domItem: HTMLElement, ctrl: boolean = false): void {\n        if (domItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_DISABLED) ||\n            domItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP)) {\n            return;\n        }\n\n        if (this._selectedDomItem) {\n            this.clearSelection();\n            this._selectedDomItem = null;\n        }\n\n        domItem.classList.toggle(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n        domItem.focus();\n        this._selectedDomItem = domItem;\n\n        const dataItem: ListBoxItem = this._getDataItem(domItem.id);\n        dataItem.selected = true;\n        this.selectedDataItems.push(dataItem);\n\n        this._fireEvent(BaseListBox.EVENT_VALUE_CHANGED, this._getDataItem(domItem.id));\n    }\n\n    protected _filterChanged(): void {\n        if (!this._selectedDomItem || this._selectedDomItem.style.display === \"none\") {\n            const elements: NodeListOf<Element> = this._list.querySelectorAll(\".\" + BaseListBox.LIST_ITEM_CLASS);\n            for (let i: number = 0; i < elements.length; i++) {\n                let element: HTMLElement = elements.item(i) as HTMLElement;\n                if (!element.classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP) &&\n                    !element.classList.contains(BaseListBox.LIST_ITEM_CLASS_DISABLED) &&\n                    element.style.display !== \"none\") {\n                    this._itemClicked(element);\n                    break;\n                }\n            }\n        }\n\n        this._fireEvent(BaseListBox.EVENT_FILTER_CHANGED, this._searchbar.value);\n    }\n}\n","import {BaseListBox} from \"./BaseListBox\";\nimport {ListBoxSettings} from \"./contract/ListBoxSettings\";\nimport {ListBoxItem} from \"./contract/ListBoxItem\";\n\nexport class MultiSelectListBox extends BaseListBox {\n\n    /**\n     * Create an instance of MultiSelectListBox.\n     *\n     * Inherit a {Listbox} class.\n     *\n     * @constructor\n     * @this {MultiSelectListBox}\n     * @param {object} domElement DOM element to be converted to the ListBox\n     * @param {object} options an object with ListBox settings\n     */\n    constructor(domElement: HTMLElement, options?: ListBoxSettings) {\n        super(domElement, options, true);\n        this._createListbox();\n    }\n\n    protected _itemClicked(domItem: HTMLElement, ctrl: boolean = false): void {\n        if (domItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_DISABLED) ||\n            domItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_GROUP)) {\n            return;\n        }\n\n        let dataItem: ListBoxItem = this._getDataItem(domItem.id);\n\n        if (domItem.classList.contains(BaseListBox.LIST_ITEM_CLASS_SELECTED)) {\n            if (!ctrl) {\n                // deselect all except this\n                this.clearSelection();\n                domItem.classList.add(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n                dataItem.selected = true;\n                this.selectedDataItems.push(dataItem);\n            } else {\n                // deselect only this\n                domItem.classList.remove(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n                dataItem.selected = false;\n                const removeIndex: number = this.selectedDataItems.indexOf(\n                    this._getDataItem(domItem.id));\n                this.selectedDataItems.splice(removeIndex, 1);\n            }\n        } else {\n            if (!ctrl) {\n                // deselect all others\n                this.clearSelection();\n            }\n\n            domItem.focus();\n            domItem.classList.add(BaseListBox.LIST_ITEM_CLASS_SELECTED);\n            dataItem.selected = true;\n            this.selectedDataItems.push(dataItem);\n        }\n\n        this._fireEvent(BaseListBox.EVENT_VALUE_CHANGED, this.selectedDataItems);\n    }\n\n    protected _filterChanged(): void {\n        this._fireEvent(BaseListBox.EVENT_FILTER_CHANGED, this._searchbar.value);\n    }\n}\n"],"sourceRoot":""}